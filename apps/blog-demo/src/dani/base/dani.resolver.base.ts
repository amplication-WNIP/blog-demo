/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDaniArgs } from "./CreateDaniArgs";
import { UpdateDaniArgs } from "./UpdateDaniArgs";
import { DeleteDaniArgs } from "./DeleteDaniArgs";
import { DaniCountArgs } from "./DaniCountArgs";
import { DaniFindManyArgs } from "./DaniFindManyArgs";
import { DaniFindUniqueArgs } from "./DaniFindUniqueArgs";
import { Dani } from "./Dani";
import { DaniService } from "../dani.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Dani)
export class DaniResolverBase {
  constructor(
    protected readonly service: DaniService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Dani",
    action: "read",
    possession: "any",
  })
  async _danisMeta(
    @graphql.Args() args: DaniCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Dani])
  @nestAccessControl.UseRoles({
    resource: "Dani",
    action: "read",
    possession: "any",
  })
  async danis(@graphql.Args() args: DaniFindManyArgs): Promise<Dani[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Dani, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Dani",
    action: "read",
    possession: "own",
  })
  async dani(@graphql.Args() args: DaniFindUniqueArgs): Promise<Dani | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Dani)
  @nestAccessControl.UseRoles({
    resource: "Dani",
    action: "create",
    possession: "any",
  })
  async createDani(@graphql.Args() args: CreateDaniArgs): Promise<Dani> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Dani)
  @nestAccessControl.UseRoles({
    resource: "Dani",
    action: "update",
    possession: "any",
  })
  async updateDani(@graphql.Args() args: UpdateDaniArgs): Promise<Dani | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Dani)
  @nestAccessControl.UseRoles({
    resource: "Dani",
    action: "delete",
    possession: "any",
  })
  async deleteDani(@graphql.Args() args: DeleteDaniArgs): Promise<Dani | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
